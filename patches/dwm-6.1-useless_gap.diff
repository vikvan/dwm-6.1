diff -up a/config.def.h b/config.def.h
--- a/config.def.h	2015-11-11 18:04:08.772700936 +0300
+++ b/config.def.h	2015-11-11 18:13:02.088692714 +0300
@@ -12,6 +12,7 @@ static const char selbordercolor[]  = "#
 static const char selbgcolor[]      = "#005577";
 static const char selfgcolor[]      = "#eeeeee";
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int gappx     = 6;        /* gap pixel between windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
diff -up a/dwm.c b/dwm.c
--- a/dwm.c	2015-11-11 18:04:08.772700936 +0300
+++ b/dwm.c	2015-11-11 18:06:14.476698998 +0300
@@ -53,8 +53,8 @@
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
-#define WIDTH(X)                ((X)->w + 2 * (X)->bw)
-#define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
+#define WIDTH(X)                ((X)->w + 2 * (X)->bw + gappx)
+#define HEIGHT(X)               ((X)->h + 2 * (X)->bw + gappx)
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (drw_text(drw, 0, 0, 0, 0, (X), 0) + drw->fonts[0]->h)
 
@@ -1439,12 +1439,34 @@ void
 resizeclient(Client *c, int x, int y, int w, int h)
 {
 	XWindowChanges wc;
+    unsigned int n;
+    unsigned int gapoffset;
+    unsigned int gapincr;
+    Client *nbc;
 
-	c->oldx = c->x; c->x = wc.x = x;
-	c->oldy = c->y; c->y = wc.y = y;
-	c->oldw = c->w; c->w = wc.width = w;
-	c->oldh = c->h; c->h = wc.height = h;
 	wc.border_width = c->bw;
+
+    // Get number of clients for the selected monitor
+    for(n = 0, nbc = nexttiled(selmon->clients); nbc; nbc = nexttiled(nbc->next), n++);
+    // Do nothing if layout is floating
+    if(c->isfloating || selmon->lt[selmon->sellt]->arrange == NULL) {
+        gapincr = gapoffset = 0 ;
+    } else {
+        // Remove border and gap if layout is monocle or only one client
+        if (selmon->lt[selmon->sellt]->arrange == monocle || n == 1) {
+            gapoffset = 0;
+            gapincr = 0;
+            wc.border_width = 0;
+        } else {
+            gapoffset = gappx ;
+            gapincr = 2 * gappx ;
+        }
+    }
+
+    c->oldx = c->x; c->x = wc.x = x + gapoffset ;
+    c->oldy = c->y; c->y = wc.y = y + gapoffset ;
+    c->oldw = c->w; c->w = wc.width = w - gapincr ;
+    c->oldh = c->h; c->h = wc.height = h - gapincr ;
 	XConfigureWindow(dpy, c->win, CWX|CWY|CWWidth|CWHeight|CWBorderWidth, &wc);
 	configure(c);
 	XSync(dpy, False);
